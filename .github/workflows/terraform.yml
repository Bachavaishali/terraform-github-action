name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
    ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
    ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
    ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
    ARM_TENENT_ID: ${{secrets.AZURE_TENENT_ID}}
<<<<<<< HEAD
    ROOT_PATH: '../../src/terraform'
=======
    ROOT_PATH:'${{github.workspace}}/src/terraform'
>>>>>>> aacb3b68bd2c4bac93147bc828612f3ed62b4ea7

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}

   
    # Generates an execution plan for Terraform
    - name: Terraform Plan
<<<<<<< HEAD
      run: terraform plan main.tf
=======
      run: terraform plan 
>>>>>>> aacb3b68bd2c4bac93147bc828612f3ed62b4ea7
      working-directory: ${{env.ROOT_PATH}}

      
